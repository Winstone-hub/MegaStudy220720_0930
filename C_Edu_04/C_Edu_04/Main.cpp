/*
* Chapter 04
*/

#include <stdio.h>


int main(void)
{
	// ** 산술 연산자
	// +, -, *, /, %

	// ** 대입 연산자
	// =
	{
		int i = 10 + 20;
		int n = /*특정 값*/2474 % 45 + 1; // 1 ~ 45
		printf("현재 값 : %d\n", n);
		printf("\n");
	}

	// ** 복합대입 연산자
	// +=, -=, *=, /=, %=

	{
		int a = 10, b = 20;
		//a = a + b;
		a += b;

		//a = a - b;
		a -= b;

		//a = a * b;
		a *= b;

		//a = a / b;
		a /= b;

		//a = a % b;
		a %= b;
	}



	// ** 단항 연산자(증감 연산자)
	// ++, --
	// * 전위 연산 : ++ or -- (항목)
	// * 후위 연산 : (항목) ++ or --

	{
		// ** 1씩 증가 하거나 1씩 감소한다.
		int i = 0;

		// ** 전위연산 : 연산을 우선순위로 한다.
		printf("%d\n", ++i);

		// ** 후위연산 : 연산을 후순위로 한다.
		printf("%d\n", i--);

		// ** 현재 값 출력
		printf("현재 값 : %d\n", i);
		printf("\n");
	}


	// ** 2항 연산자
	// ** (항목 A) + (항목 B)
	// ** (항목 A) + (항목 B) - (항목 C)
	// ** (항목 A) + (항목 B) - (항목 C) * (항목 D)

	// 1 + 2 = 3
	// 1 + 2 + 3 = 6
	// 1 + 2 + 3 + 4 = 10

	// 132513 + 153654 =  ?
	// 132513 + 153654 - 158973 = ?
	// 132513 + 153654 - 158973 * 136721 = ?





	// ** 3항 연산자
	// (조건) ? true : false

	{
		int i = 10;
		int n = (i > 9) ? i : 0;

		printf("n : %d\n", n);
		printf("\n");
	}



	// ** 관계 연산자(비교 연산자)
	// >, <, >=, <=



	// ** 논리 연산자
	// ==, !=, !, &&(그리고), ||(또는)

	{
		// A = 10, B = 11
		int A = 10, B = 11;
		printf("int A = 10, B = 11;\n");

		// ** [A == B] : A 와 B는 같은가?  false
		printf("조건 (A == B) ? 참:1/거짓:0 = %d\n", (A == B));

		// ** [A != B] : A 와 B는 같지 않은가?  true
		printf("조건 (A != B) ? 참:1/거짓:0 = %d\n", (A != B));

		printf("\n");
	}
	
	
	// A = 0
	// ** [!(항목A)]
	{
		int A = 0;
		printf("Not 연산자\n");
		printf("!A : %d\n", !A);
		printf("\n");
	}
	


	{
		// ** [&&]
		// ** 항목A 와 항목B가 모두 true일때 true를 반환.
		int A = 1, B = 1;

		printf("&& 연산자\n");
		printf("A && B ? 참:1/거짓:0 = %d\n", A && B);
		printf("\n");


		int a, b, c, d;
		
		a = 20;
		b = 10;
		c = 30;
		d = 40;

		printf("(a > b) && (c < d) ? %d\n", (a > b) && (c < d));
		printf("\n");
	}



	{
		// [||]
		// ** 항목A 와 항목B중 1개만 true라도 true를 반환.
		int A = 1, B = 0;
		printf("|| 연산자\n");
		printf("A || B ? 참:1/거짓:0 = %d\n", A || B);
		printf("\n");

		int a, b, c, d;

		a = 10;
		b = 20;
		c = 30;
		d = 40;

		printf("(a > b) || (c < d) ? %d\n", (a > b) || (c < d));
		printf("\n");
	}


	// ** 형변환
	{
		char c = 'A';
		short s = 32767;
		int i = 100000000;

		float f = 3.141592f;

		{
			i = (int)f;
			printf("%d\n", i);
		}
		printf("\n");
	}

	// ** 비트 연산자
	// & [AND]
	// | [OR]
	// ^ [XOR]
	// >>, << 
	


	// ** 비트연산 **
	
	// ** 2진수
	
	// 00000001 = 1
	// 00000010 = 2
	// 00000011 = 3
	// 00000100 = 4
	// 00000101 = 5
	// 00000110 = 6
	// 00000111 = 7
	// 00001000 = 8
	// 00001001 = 9
	// 00001010 = 10
	// 00001011 = 11
	// 00001100 = 12
	// 00001101 = 13
	// 00001110 = 14
	// 00001111 = 15
	// 00010000 = 16



	// [10 - 9]

	//   00001010 = 10
	// - 00001001 =  9
	//------------------
	//   ???????? =  ?

	// ** CPU - 연산을 할 수 없다.
	// 그러므로 아래와같이 표현할 수 있다.
	// 10 - 9 == 10 + (-9)

	// ** 9을 음수로 만들어야 한다.

	// 음수를 만드는 과정. (2의 보수)
	// ** 1. 2의 보수 중 최초 1의 보수는 비트의 반전이다.
	// 00001001 = 9
	// 11110110

	// ** 2. 2의 보수 중 마지막 1의 보수는 +1 이다.
	// 11110110 + 1
	// 11110111 = (-9)

	// ** 검증 **
	//  1111111
	//   00001010 = 10
	// + 11110111 = (-9)
	//------------------
	//   00000001 =  1



	// <<, >> (쉬프트 연산자)
	
	// 비트를 해당 방향으로 (<<, >>) 밀어낸다.

	// 1<<1  =>  00000001 << 1회 밀어라!
	// 00000010

	// ** 검증 **
	{
		printf("** << 쉬프트 연산 **\n");

		int i = 1;
		i <<= 1;
		
		printf("%d\n", i);
		printf("\n");
	}

	{
		printf("** >> 쉬프트 연산 **\n");
		
		int i = 10;
		i >>= 1;
		
		printf("%d\n", i);
		printf("\n");
	}


	{
		// ** (/2) 준하는 연산이 필요할 때에는 아래와 같이 적용한다.
		int Lenght = 1000;
		//int Center = Lenght / 2;
		//int Center = Lenght * 0.5f;
		int Center = Lenght >> 1;
	}


	return 0;
}